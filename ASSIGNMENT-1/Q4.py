print("NAME:- SANKET MAHAPATRA")
print("REGISTRATION NUMBER:- 2241013017")
print("In Python, access control to class attributes is not strictly enforced like in some other languages. Instead, Python uses naming conventions to indicate the intended visibility and usage of attributes. These conventions are not enforced by the language itself, but they help developers understand how to interact with class members.\n")
print("Public attributes are the default in Python, and they are fully accessible from anywhere, both inside and outside the class. These attributes do not have any special naming convention, and they are typically used for attributes that need to be accessed or modified freely. There are no restrictions on accessing public attributes.\n")
print("Protected attributes are intended for internal use within the class and its subclasses. While they are not fully private, the single underscore prefix (e.g., _attribute) serves as a convention to signal that these attributes should not be accessed directly outside the class. Python does not prevent external access, but developers are expected to follow this convention to maintain proper encapsulation.\n")
print("Private attributes are for internal use only, and Python uses name mangling to prevent direct external access. A double underscore (e.g., __attribute) indicates that an attribute is private, and Python internally renames it to make accidental access more difficult. While it’s still possible to access private attributes through name mangling, it’s strongly discouraged.")